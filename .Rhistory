expiry_dates = GetExpiryDates(symbol)
expiry_dates
expiry_date = expiry_dates[4]
# Определяем направление движения к цели
opt_rights = c("call", "put")
opt_right = ifelse(target>symbol_price, opt_rights[1], opt_rights[2])
# Выбираем тип цены для определения премии
market_price_types = c("mid", "last")
market_price_type = market_price_types[2]
option_chain_short = GetStrikePremiumTable(symbol, expiry_date, market_price_type, opt_right)
atm_index = AtmStrike(option_chain_short$Strike, symbol_price, T)
# Рассчитываем прибыль для каждого страйка на уровне Цели (табл:страйк,премия; цель как число, кол/пут как фактор/текст) -> Страйк~Прибыль;
profit_for_strike = CalcProfitForStrike(option_chain_short, target, opt_right, symbol_price)
class(profit_for_strike)
str(profit_for_strike)
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
profit_for_strike
target
profit_for_strike %>% mutate(Sqr = (Profit*Q)*abs(Strike-target))
xxx = profit_for_strike %>% mutate(Sqr = (Profit*Q)*abs(Strike-target))
qplot(x = Strike, y = Sqr, data=xxx)
# Задаём символ базового актива;
symbol = "QQQ"
# Задаём Цель по цене безового актива;
target = 150
# Загружаем текущую цену базового актива;
symbol_price = getQuote(symbol)$Last
expiry_dates = GetExpiryDates(symbol)
expiry_dates
expiry_date = expiry_dates[3]
# Определяем направление движения к цели
opt_rights = c("call", "put")
opt_right = ifelse(target>symbol_price, opt_rights[1], opt_rights[2])
# Выбираем тип цены для определения премии
market_price_types = c("mid", "last")
market_price_type = market_price_types[2]
option_chain_short = GetStrikePremiumTable(symbol, expiry_date, market_price_type, opt_right)
# Рассчитываем прибыль для каждого страйка на уровне Цели (табл:страйк,премия; цель как число, кол/пут как фактор/текст) -> Страйк~Прибыль;
profit_for_strike = CalcProfitForStrike(option_chain_short, target, opt_right, symbol_price)
xxx = profit_for_strike %>% mutate(Sqr = (Profit*Q)*abs(Strike-target))
qplot(x = Strike, y = Sqr, data=xxx)
runApp('GitHub/OptionForTarget')
expiry_date = expiry_dates[2]
# Определяем направление движения к цели
opt_rights = c("call", "put")
opt_right = ifelse(target>symbol_price, opt_rights[1], opt_rights[2])
# Выбираем тип цены для определения премии
market_price_types = c("mid", "last")
market_price_type = market_price_types[2]
option_chain_short = GetStrikePremiumTable(symbol, expiry_date, market_price_type, opt_right)
# Рассчитываем прибыль для каждого страйка на уровне Цели (табл:страйк,премия; цель как число, кол/пут как фактор/текст) -> Страйк~Прибыль;
profit_for_strike = CalcProfitForStrike(option_chain_short, target, opt_right, symbol_price)
xxx = profit_for_strike %>% mutate(Sqr = (Profit*Q)*abs(Strike-target))
qplot(x = Strike, y = Sqr, data=xxx)
symbol_price
library("plotly", lib.loc="C:/Program Files/R/R-3.4.2/library")
library("ggiraph", lib.loc="C:/Program Files/R/R-3.4.2/library")
shiny::runApp('GitHub/OptionForTarget')
rhandsontable:::editAddin()
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
source('~/GitHub/OptionForTarget/CalcProfitForStrike.R', encoding = 'UTF-8')
if(!require('scales')) install.packages('scales')
source('~/GitHub/OptionForTarget/CalcProfitForStrike.R', encoding = 'UTF-8')
runApp('GitHub/OptionForTarget')
# Рассчитываем прибыль для каждого страйка на уровне Цели (табл:страйк,премия; цель как число, кол/пут как фактор/текст) -> Страйк~Прибыль;
profit_for_strike = CalcProfitForStrike(option_chain_short, target, opt_right, symbol_price)
profit_for_strike
# Рассчитываем прибыль для каждого страйка на уровне Цели (табл:страйк,премия; цель как число, кол/пут как фактор/текст) -> Страйк~Прибыль;
profit_for_strike = CalcProfitForStrike(option_chain_short, target, opt_right, symbol_price, 0.05, expiry_date)
profit_for_strike
source('~/GitHub/OptionForTarget/CalcProfitForStrike.R', encoding = 'UTF-8')
# Рассчитываем прибыль для каждого страйка на уровне Цели (табл:страйк,премия; цель как число, кол/пут как фактор/текст) -> Страйк~Прибыль;
profit_for_strike = CalcProfitForStrike(option_chain_short, target, opt_right, symbol_price, 0.05, expiry_date)
profit_for_strike
runApp('GitHub/OptionForTarget')
profit_for_strike
# Рассчитываем прибыль для каждого страйка на уровне Цели (табл:страйк,премия; цель как число, кол/пут как фактор/текст) -> Страйк~Прибыль;
profit_for_strike = CalcProfitForStrike(option_chain_short, target, opt_right, symbol_price, 0.05, expiry_date)
profit_for_strike$Return
source('~/GitHub/OptionForTarget/CalcProfitForStrike.R', encoding = 'UTF-8')
# Рассчитываем прибыль для каждого страйка на уровне Цели (табл:страйк,премия; цель как число, кол/пут как фактор/текст) -> Страйк~Прибыль;
profit_for_strike = CalcProfitForStrike(option_chain_short, target, opt_right, symbol_price, 0.05, expiry_date)
profit_for_strike$Return
source('~/GitHub/OptionForTarget/CalcProfitForStrike.R', encoding = 'UTF-8')
source('~/GitHub/OptionForTarget/CalcProfitForStrike.R', encoding = 'UTF-8')
# Рассчитываем прибыль для каждого страйка на уровне Цели (табл:страйк,премия; цель как число, кол/пут как фактор/текст) -> Страйк~Прибыль;
profit_for_strike = CalcProfitForStrike(option_chain_short, target, opt_right, symbol_price, 0.05, expiry_date)
profit_for_strike$Return
CalcProfitForStrike = function(df_strike_premium, target, opt_type, ba_price=0, bank_rate=NULL, exp_date=NULL){
if(!require('dplyr')) install.packages('dplyr')
if(!require('scales')) install.packages('scales')
# Проверяем наличие колонок Strike и Premium
columns_required = c('Strike', 'Premium')
columns_present = names(df_strike_premium)
columns_missing = setdiff(columns_required, columns_present)
if(length(columns_missing)>0)
stop(paste0("Can't find required columns in dataframe: ", columns_missing))
# Если известна цена базовго актива, определяем центральный страйк серии
# Если цена базовго актива не известна, заменяем её средней премией опциона в серии
if(ba_price>0)
{
atm_index = AtmStrike(df_strike_premium$Strike, ba_price, T)
atm_premium = df_strike_premium$Premium[atm_index]
}
else
{
atm_premium = mean(df_strike_premium$Premium, na.rm = T)
}
opt_type_num = ifelse(opt_type=="call", 1, -1)
profit_at_strike = df_strike_premium %>%
mutate( Revenue = (target-Strike) * opt_type_num ) %>%
mutate( Revenue = pmax(0, Revenue) ) %>%
mutate( Profit = Revenue - Premium ) %>%
mutate( Q =  atm_premium / Premium ) %>%
mutate( Profitability = Profit / Premium )
#select(Strike, Profit_per_dollar)
# Доходность опциона относительно текущей цены базового актива (Колич * Прибыль / Цена_актива)
#if(ba_price>0){
#profit_at_strike = profit_at_strike %>% mutate(Strike_ror = Q * Profit /  ba_price)
if( !is.null(bank_rate) & !is.null(exp_date) ){
exp_date = as.Date(exp_date)
exp_days = as.numeric(exp_date - Sys.Date())
exp_years = exp_days / 365
profit_at_strike = profit_at_strike %>% mutate(Return = Q * Profit * bank_rate * exp_years)
# profit_at_strike$Return = percent(profit_at_strike$Return)
}
#}
# Оставляем страйки только до цели (после цели фин.рез всё равно 0)
if(opt_type_num==1)
profit_at_strike = profit_at_strike %>% filter(Strike<=target)
else
profit_at_strike = profit_at_strike %>% filter(Strike>=target)
return(profit_at_strike)
}
# Рассчитываем прибыль для каждого страйка на уровне Цели (табл:страйк,премия; цель как число, кол/пут как фактор/текст) -> Страйк~Прибыль;
profit_for_strike = CalcProfitForStrike(option_chain_short, target, opt_right, symbol_price, 0.05, expiry_date)
profit_for_strike$Return
profit_for_strike$Return %>% formatC(digits = 2)
profit_for_strike$Return %>% formatC(digits = 2, format = "f")
profit_for_strike$Return %>% formatC(digits = 2, format = "F")
profit_for_strike$Return %>% formatC(digits = 2, format = "e")
profit_for_strike$Return %>% formatC(digits = 2, format = "E")
profit_for_strike$Return %>% formatC(digits = 2, format = "G")
profit_for_strike$Return %>% formatC(digits = 2, format = "G") %>% sum
source('~/GitHub/OptionForTarget/CalcProfitForStrike.R', encoding = 'UTF-8')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
shiny::runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
source('~/GitHub/OptionForTarget/CalcProfitForStrike.R', encoding = 'UTF-8')
runApp('GitHub/OptionForTarget')
CalcProfitForStrike = function(df_strike_premium, target, opt_type, ba_price=0, bank_rate=NULL, exp_date=NULL){
if(!require('dplyr')) install.packages('dplyr')
if(!require('scales')) install.packages('scales')
# Проверяем наличие колонок Strike и Premium
columns_required = c('Strike', 'Premium')
columns_present = names(df_strike_premium)
columns_missing = setdiff(columns_required, columns_present)
if(length(columns_missing)>0)
stop(paste0("Can't find required columns in dataframe: ", columns_missing))
# Если известна цена базовго актива, определяем центральный страйк серии
# Если цена базовго актива не известна, заменяем её средней премией опциона в серии
if(ba_price>0)
{
atm_index = AtmStrike(df_strike_premium$Strike, ba_price, T)
atm_premium = df_strike_premium$Premium[atm_index]
}
else
{
atm_premium = mean(df_strike_premium$Premium, na.rm = T)
}
opt_type_num = ifelse(opt_type=="call", 1, -1)
profit_at_strike = df_strike_premium %>%
mutate( Revenue = (target-Strike) * opt_type_num ) %>%
mutate( Revenue = pmax(0, Revenue) ) %>%
mutate( Profit = Revenue - Premium ) %>%
mutate( Q =  atm_premium / Premium ) %>%
mutate( Profitability = Profit / Premium )
#select(Strike, Profit_per_dollar)
# Доходность опциона относительно текущей цены базового актива (Колич * Прибыль / Цена_актива)
#if(ba_price>0){
#profit_at_strike = profit_at_strike %>% mutate(Strike_ror = Q * Profit /  ba_price)
if( !is.null(bank_rate) & !is.null(exp_date) ){
exp_date = as.Date(exp_date)
exp_days = as.numeric(exp_date - Sys.Date())
exp_years = exp_days / 365
profit_at_strike = profit_at_strike %>% mutate(Return =  Profitability * bank_rate * exp_years) #Q * Profit
# profit_at_strike$Return = percent(profit_at_strike$Return)
}
#}
# Оставляем страйки только до цели (после цели фин.рез всё равно 0)
if(opt_type_num==1)
profit_at_strike = profit_at_strike %>% filter(Strike<=target)
else
profit_at_strike = profit_at_strike %>% filter(Strike>=target)
return(profit_at_strike)
}
profit_for_strike
if(!require('quantmod')) install.packages('quantmod')
# Безрисковая ставка депозита
bank_ror = 0.05
# Задаём символ базового актива;
symbol = "QQQ"
# Задаём Цель по цене безового актива;
target = 150
# Загружаем текущую цену базового актива;
symbol_price = getQuote(symbol)$Last
# Загружаем доступные даты экспирации символа (Символ);
expiry_dates = GetExpiryDates(symbol)
expiry_dates
expiry_date = expiry_dates[5]
# Определяем направление движения к цели
opt_rights = c("call", "put")
opt_right = ifelse(target>symbol_price, opt_rights[1], opt_rights[2])
# Выбираем тип цены для определения премии
market_price_types = c("mid", "last")
market_price_type = market_price_types[2]
option_chain_short = GetStrikePremiumTable(symbol, expiry_date, market_price_type, opt_right)
#atm_index = AtmStrike(option_chain_short$Strike, symbol_price, T)
profit_for_targets = CalcProfitForTargets(option_chain_short, target, opt_right, symbol_price, 0.05, expiry_date)
profit_for_targets = profit_for_targets %>% dplyr::select(Strike, Target, Return) %>%
filter(Strike<=symbol_price) %>%
mutate(Return = round(Return * 100, 2))
require(scales)
gg1 = ggplot(data=profit_for_targets, aes(x=Target, y=Strike, fill=Return)) + geom_tile() +
geom_text(aes(label=Return), size=3) +
scale_fill_gradient2(low = "white", high = "green", mid = "white")
ggplotly(gg1)
require(dplyr)
if(!require('quantmod')) install.packages('quantmod')
require(dplyr)
# Безрисковая ставка депозита
bank_ror = 0.05
# Задаём символ базового актива;
symbol = "QQQ"
# Задаём Цель по цене безового актива;
target = 150
# Загружаем текущую цену базового актива;
symbol_price = getQuote(symbol)$Last
# Загружаем доступные даты экспирации символа (Символ);
expiry_dates = GetExpiryDates(symbol)
expiry_dates
expiry_date = expiry_dates[5]
# Определяем направление движения к цели
opt_rights = c("call", "put")
opt_right = ifelse(target>symbol_price, opt_rights[1], opt_rights[2])
# Выбираем тип цены для определения премии
market_price_types = c("mid", "last")
market_price_type = market_price_types[2]
option_chain_short = GetStrikePremiumTable(symbol, expiry_date, market_price_type, opt_right)
#atm_index = AtmStrike(option_chain_short$Strike, symbol_price, T)
profit_for_targets = CalcProfitForTargets(option_chain_short, target, opt_right, symbol_price, 0.05, expiry_date)
profit_for_targets = profit_for_targets %>% dplyr::select(Strike, Target, Return) %>%
filter(Strike<=symbol_price) %>%
mutate(Return = round(Return * 100, 2))
require(scales)
gg1 = ggplot(data=profit_for_targets, aes(x=Target, y=Strike, fill=Return)) + geom_tile() +
geom_text(aes(label=Return), size=3) +
scale_fill_gradient2(low = "white", high = "green", mid = "white")
require(plotly)
ggplotly(gg1)
require(ggplot2)
require(dplyr)
require(ggplot2)
# Безрисковая ставка депозита
bank_ror = 0.05
# Задаём символ базового актива;
symbol = "QQQ"
# Задаём Цель по цене безового актива;
target = 150
# Загружаем текущую цену базового актива;
symbol_price = getQuote(symbol)$Last
# Загружаем доступные даты экспирации символа (Символ);
expiry_dates = GetExpiryDates(symbol)
expiry_dates
expiry_date = expiry_dates[5]
# Определяем направление движения к цели
opt_rights = c("call", "put")
opt_right = ifelse(target>symbol_price, opt_rights[1], opt_rights[2])
# Выбираем тип цены для определения премии
market_price_types = c("mid", "last")
market_price_type = market_price_types[2]
option_chain_short = GetStrikePremiumTable(symbol, expiry_date, market_price_type, opt_right)
#atm_index = AtmStrike(option_chain_short$Strike, symbol_price, T)
profit_for_targets = CalcProfitForTargets(option_chain_short, target, opt_right, symbol_price, 0.05, expiry_date)
profit_for_targets = profit_for_targets %>% dplyr::select(Strike, Target, Return) %>%
filter(Strike<=symbol_price) %>%
mutate(Return = round(Return * 100, 2))
require(scales)
gg1 = ggplot(data=profit_for_targets, aes(x=Target, y=Strike, fill=Return)) + geom_tile() +
geom_text(aes(label=Return), size=3) +
scale_fill_gradient2(low = "white", high = "green", mid = "white")
require(plotly)
ggplotly(gg1)
CalcProfitForTargets = function(df_strike_premium, target, opt_type, ba_price=0, bank_rate=NULL, exp_date=NULL){
# Если target - вектор - тогда рассчёт прибыли будет по этим значениям;
# Если target - число - тогда фукнция формирует вектор из 10 значений в диапазоне от ba_price до target
if(length(target) == 1)
targets = seq(from = target, to = ba_price, length.out = 10)
else
targets = target
profit_table = NULL
#   Для каждого значения цели из диапазона запускаем функцию CalcProfitForStrike
for (tgt in targets) {
profits = CalcProfitForStrike(df_strike_premium, tgt, opt_type, ba_price, bank_rate, exp_date)
profits$Target = tgt
if(!is.null(profit_table))
profit_table = rbind(profit_table, profits)
else
profit_table = profits
}
return(profit_table)
}
profit_for_targets = CalcProfitForTargets(option_chain_short, target, opt_right, symbol_price, 0.05, expiry_date)
profit_for_targets = profit_for_targets %>% dplyr::select(Strike, Target, Return) %>%
filter(Strike<=symbol_price) %>%
mutate(Return = round(Return * 100, 2))
require(scales)
gg1 = ggplot(data=profit_for_targets, aes(x=Target, y=Strike, fill=Return)) + geom_tile() +
geom_text(aes(label=Return), size=3) +
scale_fill_gradient2(low = "white", high = "green", mid = "white")
require(plotly)
ggplotly(gg1)
# Задаём Цель по цене безового актива;
target = 130
profit_for_targets = CalcProfitForTargets(option_chain_short, target, opt_right, symbol_price, 0.05, expiry_date)
profit_for_targets = profit_for_targets %>% dplyr::select(Strike, Target, Return) %>%
filter(Strike<=symbol_price) %>%
mutate(Return = round(Return * 100, 2))
require(scales)
gg1 = ggplot(data=profit_for_targets, aes(x=Target, y=Strike, fill=Return)) + geom_tile() +
geom_text(aes(label=Return), size=3) +
scale_fill_gradient2(low = "white", high = "green", mid = "white")
require(plotly)
ggplotly(gg1)
shiny::runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
runApp('GitHub/OptionForTarget')
gg
gg = ggplot(data=profit_for_strike, aes(x=Strike, y=Profit), color='red') + geom_point()
gg
gg + geom_vline(xintercept = symbol_price, show.legend = T) +
geom_text(aes(label=Return))
gg + geom_vline(xintercept = symbol_price, show.legend = T) +
geom_text(aes(label=paste0(round(Return, 2),"%" ) ), size=3)
gg + geom_vline(xintercept = symbol_price, show.legend = T) +
geom_text(aes(label=paste0(round(Return*100, 2),"%" ) ), size=3)
gg + geom_vline(xintercept = symbol_price, show.legend = T) +
geom_text(aes(label=paste0(round(Return*100, 2),"%" ), vjust=1 ), size=3)
gg + geom_vline(xintercept = symbol_price, show.legend = T) +
geom_text(aes(label=paste0(round(Return*100, 2),"%" ), vjust=-1, hjust=1 ), size=3)
gg = ggplot(data=profit_for_strike, aes(x=Strike, y=Return), color='red') + geom_point()
gg + geom_vline(xintercept = symbol_price, show.legend = T) +
geom_text(aes(label=paste0(round(Return*100, 2),"%" ), vjust=-1, hjust=1 ), size=3)
gg + geom_vline(xintercept = symbol_price, show.legend = T) +
geom_text(data = profit_for_strike %>% filter(Return>0.04),aes(label=paste0(round(Return*100, 2),"%" ), vjust=-1, hjust=1 ), size=3)
ggplotly(gg1)
shiny::runApp('GitHub/OptionForTarget')
CalcProfitForTargets = function(df_strike_premium, target, opt_type, ba_price=0, bank_rate=NULL, exp_date=NULL){
# Если target - вектор - тогда рассчёт прибыли будет по этим значениям;
# Если target - число - тогда фукнция формирует вектор из 10 значений в диапазоне от ba_price до target
if(length(target) == 1)
targets = seq(from = target, to = ba_price, length.out = 10)
else
targets = target
profit_table = NULL
#   Для каждого значения цели из диапазона запускаем функцию CalcProfitForStrike
for (tgt in targets) {
profits = CalcProfitForStrike(df_strike_premium, tgt, opt_type, ba_price, bank_rate, exp_date)
profits$Target = tgt
if(!is.null(profit_table))
profit_table = rbind(profit_table, profits)
else
profit_table = profits
}
return(profit_table)
}
View(profit_for_targets)
runApp('GitHub/OptionForTarget')
source('CalcProfitForTargets.R', local = T)
source('~/GitHub/OptionForTarget/CalcProfitForTargets.R', encoding = 'UTF-8')
source('CalcProfitForTargets.R', local = T)
getwd()
setwd('C:/Users/Andreal/Documents/GitHub/OptionForTarget')
source('CalcProfitForTargets.R', local = T)
source("CalcProfitForStrike.R", local = T, echo = F)
source('AtmStrike.R', local = T)
source('GetExpiryDates.R', local = T)
source('GetStrikePremiumTable.R', local = T)
source('CalcProfitForTargets.R', local = T)
runApp()
runApp()
runApp()
profit_for_strike
runApp()
if(!require('quantmod')) install.packages('quantmod')
require(dplyr)
require(ggplot2)
# Безрисковая ставка депозита
bank_ror = 0.05
# Задаём символ базового актива;
symbol = "QQQ"
# Задаём Цель по цене безового актива;
target = 130
# Загружаем текущую цену базового актива;
symbol_price = getQuote(symbol)$Last
# Загружаем доступные даты экспирации символа (Символ);
expiry_dates = GetExpiryDates(symbol)
expiry_dates
expiry_date = expiry_dates[5]
# Определяем направление движения к цели
opt_rights = c("call", "put")
opt_right = ifelse(target>symbol_price, opt_rights[1], opt_rights[2])
# Выбираем тип цены для определения премии
market_price_types = c("mid", "last")
market_price_type = market_price_types[2]
option_chain_short = GetStrikePremiumTable(symbol, expiry_date, market_price_type, opt_right)
#atm_index = AtmStrike(option_chain_short$Strike, symbol_price, T)
profit_for_targets = CalcProfitForTargets(option_chain_short, target, opt_right, symbol_price, 0.05, expiry_date)
profit_for_targets = profit_for_targets %>% dplyr::select(Strike, Target, Return) %>%
filter(Strike<=symbol_price) %>%
mutate(Return = round(Return * 100, 2))
profit_for_targets
profit_for_targets %>% filter(top_n(5, Return))
profit_for_targets %>% filter(top_n(., 5, Return))
profit_for_targets %>% top_n(., 5, Return)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/GitHub/OptionForTarget/CalcProfitForTargets.R', encoding = 'UTF-8')
CalcProfitForTargets = function(df_strike_premium, target, opt_type, ba_price=0, bank_rate=NULL, exp_date=NULL){
# Если target - вектор - тогда рассчёт прибыли будет по этим значениям;
# Если target - число - тогда фукнция формирует вектор из 10 значений в диапазоне от ba_price до target
if(length(target) == 1)
targets = seq(from = target, to = ba_price, length.out = 10)
else
targets = target
profit_table = NULL
#   Для каждого значения цели из диапазона запускаем функцию CalcProfitForStrike
for (tgt in targets) {
profits = CalcProfitForStrike(df_strike_premium, tgt, opt_type, ba_price, bank_rate, exp_date)
profits$Target = tgt
if(!is.null(profit_table))
profit_table = rbind(profit_table, profits)
else
profit_table = profits
}
profit_table$Return = round(profit_table$Return, 4)
profit_table$Profitability = round(profit_table$Profitability, 2)
return(profit_table)
}
CalcProfitForTargets = function(df_strike_premium, target, opt_type, ba_price=0, bank_rate=NULL, exp_date=NULL){
# Если target - вектор - тогда рассчёт прибыли будет по этим значениям;
# Если target - число - тогда фукнция формирует вектор из 10 значений в диапазоне от ba_price до target
if(length(target) == 1)
targets = seq(from = target, to = ba_price, length.out = 10)
else
targets = target
profit_table = NULL
#   Для каждого значения цели из диапазона запускаем функцию CalcProfitForStrike
for (tgt in targets) {
profits = CalcProfitForStrike(df_strike_premium, tgt, opt_type, ba_price, bank_rate, exp_date)
profits$Target = tgt
if(!is.null(profit_table))
profit_table = rbind(profit_table, profits)
else
profit_table = profits
}
profit_table$Return = round(profit_table$Return, 4)
profit_table$Profitability = round(profit_table$Profitability, 2)
profit_table$Q = round(profit_table$Q, 2)
return(profit_table)
}
source('~/GitHub/OptionForTarget/CalcProfitForTargets.R', encoding = 'UTF-8')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
