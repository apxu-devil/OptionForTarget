mutate(Profit = pmax(0,Profit)) %>%
mutate(Profit = Profit - Premium) %>%
mutate(Q_mult =  atm_premium/Premium ) %>%
mutate(Profit_per_dollar = Q_mult * Profit / mean(Premium)) %>%
select(Strike, Profit_per_dollar)
if(opt_type_num==1)
profit_at_strike = profit_at_strike %>% filter(Strike<=target)
else
profit_at_strike = profit_at_strike %>% filter(Strike>=target)
return(profit_at_strike)
}
profit_for_strike = CalcProfitForStrike(option_chain_short, target, opt_right, atm_index)
option_chain_short
target
opt_right
atm_index
atm_index = AtmStrike(option_chain_short$Strikes, symbol_price, T)
atm_index
symbol_price
option_chain_short$Strikes
option_chain_short$Strike
atm_index = AtmStrike(option_chain_short$Strike, symbol_price, T)
profit_for_strike =
CalcProfitForStrike(option_chain_short, target, opt_right, atm_index)
df_strike_premium
target
opt_type
strike_index
atm_premium
profit_at_strike
CalcProfitForStrike = function(df_strike_premium, target, opt_type, strike_index=0){
if(!require('dplyr')) install.packages('dplyr')
if(strike_index==0)
atm_premium = mean(df_strike_premium$Premium)
else
atm_premium = df_strike_premium$Premium[strike_index]
opt_type_num = ifelse(opt_type=="call", 1, -1)
profit_at_strike = df_strike_premium %>%
mutate(Profit = (target-Strike)*opt_type_num ) %>%
mutate(Profit = pmax(0,Profit)) %>%
mutate(Profit = Profit - Premium) %>%
mutate(Q_mult =  atm_premium/Premium ) %>%
mutate(Profit_per_dollar = Q_mult * Profit / mean(Premium)) %>%
select(Strike, Profit_per_dollar)
if(opt_type_num==1)
profit_at_strike = profit_at_strike %>% filter(Strike<=target)
else
profit_at_strike = profit_at_strike %>% filter(Strike>=target)
return(profit_at_strike)
}
profit_for_strike
profit_for_strike %>% mutate(Strike_ror = Profit_per_dollar / symbol_price)
bank_ror= 0.05
profit_for_strike %>% mutate(Strike_ror = Profit_per_dollar / symbol_price * bank_ror)
profit_for_strike %>% mutate(Strike_ror = Profit_per_dollar / symbol_price)
View(option_chain_short)
CalcProfitForStrike = function(df_strike_premium, target, opt_type, ba_price=0){
if(!require('dplyr')) install.packages('dplyr')
browser()
if(ba_price>0){
atm_index = AtmStrike(df_strike_premium$Strike, ba_price, T)
atm_premium = df_strike_premium$Premium[atm_index]
} else {
atm_premium = df_strike_premium$Premium[strike_index]
}
opt_type_num = ifelse(opt_type=="call", 1, -1)
profit_at_strike = df_strike_premium %>%
mutate(Profit = (target-Strike)*opt_type_num ) %>%
mutate(Profit = pmax(0,Profit)) %>%
mutate(Profit = Profit - Premium) %>%
mutate(Q_mult =  atm_premium/Premium ) %>%
mutate(Profit_per_dollar = Q_mult * Profit / atm_premium)
#select(Strike, Profit_per_dollar)
if(ba_price>0){
profit_at_strike = profit_at_strike %>% mutate(Strike_ror = Q_mult * Profit /  ba_price)
}
# Оставляем страйки только до цели (после цели фин.рез всё равно 0)
if(opt_type_num==1)
profit_at_strike = profit_at_strike %>% filter(Strike<=target)
else
profit_at_strike = profit_at_strike %>% filter(Strike>=target)
return(profit_at_strike)
}
symbol_price
opt_right
target
option_chain_short
profit_for_strike = CalcProfitForStrike(option_chain_short, target, opt_right, symbol_price)
View(profit_at_strike)
profit_for_strike
require(fOptions)
trades = data.frame(opt_type = ("c"), strike = 100, price = 1, quant = 1)
trades
base_asset = seq( from=min(trades$strike)*(1-ba_range), to=max(trades$strike)*(1+ba_range), length.out=20)
ba_range = 0.1 # base asset range for profile calculation
base_asset = seq( from=min(trades$strike)*(1-ba_range), to=max(trades$strike)*(1+ba_range), length.out=20)
base_asset
base_asset = c(base_asset, trades$strike)
base_asset
unique(base_asset)
base_asset = unique(base_asset)
order(base_asset)
base_asset[order(base_asset)]
base_asset = base_asset[order(base_asset)]
for(trade in trades){
print(trade)
}
for(n_trade in nrow(trades)){
print(trade)
}
require(fOptions)
for(n_trade in nrow(trades)){
browser()
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.001, sigma=0.001, r=0, b=0)})
}
for(n_trade in nrow(trades)){
browser()
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.001, sigma=0.001, r=0, b=0)@price})
}
pl
for(n_trade in nrow(trades)){
browser()
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.000, sigma=0.001, r=0, b=0)@price})
}
pl
pl[is.nan(pl)]
pl[is.nan(pl)] = 0
pl
for(n_trade in nrow(trades)){
browser()
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.000, sigma=0.001, r=0, b=0)@price})
pl[is.nan(pl)] = 0
pl = (pl-price) * quant
if(!exists(pl_profile)) pl_profile = pl
else pl_profile = pl_profile + pl
}
for(n_trade in nrow(trades)){
browser()
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.000, sigma=0.001, r=0, b=0)@price})
pl[is.nan(pl)] = 0
pl = (pl-price) * quant
if(n_trade = 1) pl_profile = pl
else pl_profile = pl_profile + pl
}
for(n_trade in nrow(trades)){
browser()
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.000, sigma=0.001, r=0, b=0)@price})
pl[is.nan(pl)] = 0
pl = (pl-price) * quant
if(n_trade = 1)
pl_profile = pl
else
pl_profile = pl_profile + pl
}
for(n_trade in nrow(trades)){
browser()
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.000, sigma=0.001, r=0, b=0)@price})
pl[is.nan(pl)] = 0
pl = (pl-price) * quant
if(n_trade = 1)
pl_profile = pl
else
pl_profile = pl_profile + pl
}
for(n_trade in nrow(trades)){
browser()
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.000, sigma=0.001, r=0, b=0)@price})
pl[is.nan(pl)] = 0
pl = (pl-price) * quant
if(n_trade == 1)
pl_profile = pl
else
pl_profile = pl_profile + pl
}
pl_profile
library("foreach", lib.loc="~/R/win-library/3.2")
profile_data = data.frame(ba = base_asset, pl = pl_profile)
profile_data
plot(profile_data, ba~pl)
plot(profile_data, ba~pl, type="l")
trades = cbind(trades, data.frame(opt_type = ("p"), strike = 100, price = 1, quant = 1))
trades
trades = cbind(trades, data.frame(opt_type = ("p"), strike = 100, price = 1, quant = 1))
trades
trades = data.frame(opt_type = ("c"), strike = 100, price = 1, quant = 1)
trades = rbind(trades, data.frame(opt_type = ("p"), strike = 100, price = 1, quant = 1))
trades
for(n_trade in nrow(trades)){
browser()
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.000, sigma=0.001, r=0, b=0)@price})
pl[is.nan(pl)] = 0
pl = (pl-price) * quant
if(n_trade == 1)
pl_profile = pl
else
pl_profile = pl_profile + pl
}
profile_data = data.frame(ba = base_asset, pl = pl_profile)
plot(profile_data, ba~pl, type="l")
trades = data.frame(opt_type = ("c"), strike = 100, price = 1, quant = 1)
trades = rbind(trades, data.frame(opt_type = ("p"), strike = 95, price = 1, quant = -1))
for(n_trade in nrow(trades)){
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.000, sigma=0.001, r=0, b=0)@price})
pl[is.nan(pl)] = 0
pl = (pl-price) * quant
if(n_trade == 1)
pl_profile = pl
else
pl_profile = pl_profile + pl
}
profile_data = data.frame(ba = base_asset, pl = pl_profile)
plot(profile_data, ba~pl, type="l")
trades = rbind(trades, data.frame(opt_type = ("p"), strike = 95, price = 1, quant = -1))
for(n_trade in nrow(trades)){
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.000, sigma=0.001, r=0, b=0)@price})
pl[is.nan(pl)] = 0
pl = (pl-price) * quant
if(n_trade == 1)
pl_profile = pl
else
pl_profile = pl_profile + pl
}
profile_data = data.frame(ba = base_asset, pl = pl_profile)
plot(profile_data, ba~pl, type="l")
base_asset = seq( from=min(trades$strike)*(1-ba_range), to=max(trades$strike)*(1+ba_range), length.out=20)
base_asset = c(base_asset, trades$strike)
base_asset = unique(base_asset)
base_asset = base_asset[order(base_asset)]
for(n_trade in nrow(trades)){
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.000, sigma=0.001, r=0, b=0)@price})
pl[is.nan(pl)] = 0
pl = (pl-price) * quant
if(n_trade == 1)
pl_profile = pl
else
pl_profile = pl_profile + pl
}
profile_data = data.frame(ba = base_asset, pl = pl_profile)
plot(profile_data, ba~pl, type="l")
base_asset
trades
for(n_trade in nrow(trades)){
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.000, sigma=0.001, r=0, b=0)@price})
pl[is.nan(pl)] = 0
pl = (pl-price) * quant
if(n_trade == 1)
pl_profile = pl
else
pl_profile = pl_profile + pl
}
profile_data = data.frame(ba = base_asset, pl = pl_profile)
plot(profile_data, ba~pl, type="l")
rm(pl_profile)
for(n_trade in nrow(trades)){
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.000, sigma=0.001, r=0, b=0)@price})
pl[is.nan(pl)] = 0
pl = (pl-price) * quant
if(n_trade == 1)
pl_profile = pl
else
pl_profile = pl_profile + pl
}
for(n_trade in nrow(trades)){
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.000, sigma=0.001, r=0, b=0)@price})
pl[is.nan(pl)] = 0
pl = (pl-price) * quant
if(n_trade == 1)
pl_profile = pl
else
pl_profile = pl_profile + pl
}
for(n_trade in c(1:nrow(trades))){
typeflag = trades$opt_type[n_trade]
strike  = trades$strike[n_trade]
price = trades$price[n_trade]
quant = trades$quant[n_trade]
pl = sapply(base_asset, function(x){GBSOption(TypeFlag=typeflag, S=x, X=strike, Time=0.000, sigma=0.001, r=0, b=0)@price})
pl[is.nan(pl)] = 0
pl = (pl-price) * quant
if(n_trade == 1)
pl_profile = pl
else
pl_profile = pl_profile + pl
}
profile_data = data.frame(ba = base_asset, pl = pl_profile)
plot(profile_data, ba~pl, type="l")
shiny::runApp('GitHub/OptionForTarget')
install.packages("plotly")
require(plotly)
install.packages("plotly")
require(plotly)
runApp('GitHub/OptionForTarget')
if(!require('quantmod')) install.packages('quantmod')
require(dplyr)
require(ggplot2)
bank_ror = 0.05
symbol = "QQQ"
target = 130
symbol_price = getQuote(symbol)$Last
expiry_dates = GetExpiryDates(symbol)
source("CalcProfitForStrike.R", local = T, echo = F)
setwd('C:/Users/Andreal/Documents/GitHub/OptionForTarget')
setwd('C:/Users/User/Documents/GitHub/OptionForTarget')
source("CalcProfitForStrike.R", local = T, echo = F)
source('AtmStrike.R', local = T)
source('GetExpiryDates.R', local = T)
source('GetStrikePremiumTable.R', local = T)
source('CalcProfitForTargets.R', local = T)
expiry_dates = GetExpiryDates(symbol)
expiry_dates
expiry_date = expiry_dates[6]
opt_rights = c("call", "put")
opt_right = ifelse(target>symbol_price, opt_rights[1], opt_rights[2])
market_price_types = c("mid", "last")
market_price_type = market_price_types[2]
option_chain_short = GetStrikePremiumTable(symbol, expiry_date, market_price_type, opt_right)
option_chain_short
df_strike_premium = option_chain_short
target = 150
target = 200
opt_type = "call"
symbol_price
ba_price = 176
if(ba_price>0)
{
atm_index = AtmStrike(df_strike_premium$Strike, ba_price, T)
atm_premium = df_strike_premium$Premium[atm_index]
atm_strike = AtmStrike(df_strike_premium$Strike, ba_price, F)
}
else
{
atm_premium = mean(df_strike_premium$Premium, na.rm = T)
atm_index = which.min(abs(df_strike_premium$Premium - atm_premium))
atm_strike = df_strike_premium$Strike[atm_index]
}
if(ba_price>0)
{
atm_index = AtmStrike(df_strike_premium$Strike, ba_price, T)
atm_premium = df_strike_premium$Premium[atm_index]
atm_strike = AtmStrike(df_strike_premium$Strike, ba_price, F)
}
else
{
atm_premium = mean(df_strike_premium$Premium, na.rm = T)
atm_index = which.min(abs(df_strike_premium$Premium - atm_premium))
atm_strike = df_strike_premium$Strike[atm_index]
}
if(ba_price>0)
{
atm_index = AtmStrike(df_strike_premium$Strike, ba_price, T)
atm_premium = df_strike_premium$Premium[atm_index]
atm_strike = AtmStrike(df_strike_premium$Strike, ba_price, F)
}
else {
atm_premium = mean(df_strike_premium$Premium, na.rm = T)
atm_index = which.min(abs(df_strike_premium$Premium - atm_premium))
atm_strike = df_strike_premium$Strike[atm_index]
}
if(ba_price>0)
{
atm_index = AtmStrike(df_strike_premium$Strike, ba_price, T)
atm_premium = df_strike_premium$Premium[atm_index]
atm_strike = AtmStrike(df_strike_premium$Strike, ba_price, F)
}  else {
atm_premium = mean(df_strike_premium$Premium, na.rm = T)
atm_index = which.min(abs(df_strike_premium$Premium - atm_premium))
atm_strike = df_strike_premium$Strike[atm_index]
}
atm_premium
atm_index
atm_strike
opt_type_num = ifelse(opt_type=="call", 1, -1)
strike1 = 176
prem1 = df_strike_premium$Premium[Strike==strike1] # Long option premium
df_strike_premium
prem1 = df_strike_premium$Premium[opt_type$Strike==strike1] # Long option premium
prem1 = df_strike_premium$Premium[df_strike_premium$Strike==strike1] # Long option premium
prem1
profit_df = df_strike_premium
profit_df = profit_df %>%
mutate(Strike1=strike1, Strike2=Strike, Prem1=prem1, Prem2=Premium, PremSprd=Prem1-Prem2)
profit_df
profit_df$RealTarget = target
profit_df
profit_df %>% mutate(RealTarget = min(Strike2, target))
profit_df %>% mutate(RealTarget = pmin(Strike2, target))
if(opt_type_num==1)
profit_df = profit_df %>% mutate(RealTarget = pmin(Strike2, target))
else
profit_df = profit_df %>% mutate(RealTarget = pmax(Strike2, target))
if(opt_type_num==1)
profit_df = profit_df %>% mutate(RealTarget = pmin(Strike2, target))
else
profit_df = profit_df %>% mutate(RealTarget = pmax(Strike2, target))
if(opt_type_num==1){
profit_df = profit_df %>% mutate(RealTarget = pmin(Strike2, target))
} else {
profit_df = profit_df %>% mutate(RealTarget = pmax(Strike2, target))
}
profit_df
profit_df = profit_df %>%
mutate( Revenue = (RealTarget-Strike) * opt_type_num ) %>%
mutate( Revenue = pmax(0, Revenue) ) %>%
mutate( Profit = Revenue - PremSprd ) %>%
mutate( Q =  atm_premium / PremSprd ) %>%
mutate( Profitability = Profit / PremSprd )
profit_df
profit_df = profit_df %>%
mutate( Revenue = (RealTarget-Strike1) * opt_type_num ) %>%
mutate( Revenue = pmax(0, Revenue) ) %>%
mutate( Profit = Revenue - PremSprd ) %>%
mutate( Q =  atm_premium / PremSprd ) %>%
mutate( Profitability = Profit / PremSprd )
profit_df
opt_type_num
profit_df = profit_df %>%
mutate( Revenue = (RealTarget-Strike1) * opt_type_num )
profit_df
atm_premium
View(profit_df)
target = 200
opt_right = ifelse(target>symbol_price, opt_rights[1], opt_rights[2])
option_chain_short = GetStrikePremiumTable(symbol, expiry_date, market_price_type, opt_right)
df_strike_premium = option_chain_short
if(ba_price>0)
{
atm_index = AtmStrike(df_strike_premium$Strike, ba_price, T)
atm_premium = df_strike_premium$Premium[atm_index]
atm_strike = AtmStrike(df_strike_premium$Strike, ba_price, F)
}  else {
atm_premium = mean(df_strike_premium$Premium, na.rm = T)
atm_index = which.min(abs(df_strike_premium$Premium - atm_premium))
atm_strike = df_strike_premium$Strike[atm_index]
}
opt_type_num = ifelse(opt_type=="call", 1, -1)
strike1 = 176
prem1 = df_strike_premium$Premium[df_strike_premium$Strike==strike1] # Long option premium
profit_df = df_strike_premium
profit_df = profit_df %>%
mutate(Strike1=strike1, Strike2=Strike, Prem1=prem1, Prem2=Premium, PremSprd=Prem1-Prem2)
if(opt_type_num==1){
profit_df = profit_df %>% mutate(RealTarget = pmin(Strike2, target))
} else {
profit_df = profit_df %>% mutate(RealTarget = pmax(Strike2, target))
}
profit_df = profit_df %>%
mutate( Revenue = (RealTarget-Strike1) * opt_type_num ) %>%
mutate( Revenue = pmax(0, Revenue) ) %>%
mutate( Profit = Revenue - PremSprd ) %>%
mutate( Q =  atm_premium / PremSprd ) %>%
mutate( Profitability = Profit / PremSprd )
atm_premium
